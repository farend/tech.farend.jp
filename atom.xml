<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tech.farend]]></title>
  <link href="http://tech.farend.jp//atom.xml" rel="self"/>
  <link href="http://tech.farend.jp//"/>
  <updated>2014-12-02T10:03:18+09:00</updated>
  <id>http://tech.farend.jp//</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntuでの外部ボリュームマウントについて]]></title>
    <link href="http://tech.farend.jp//blog/2014/12/01/ubuntu-ext-volume/"/>
    <updated>2014-12-01T18:25:44+09:00</updated>
    <id>http://tech.farend.jp//blog/2014/12/01/ubuntu-ext-volume</id>
    <content type="html"><![CDATA[<p>Linuxサーバで外部ボリュームを起動時に自動的にマウントさせるには<code>/etc/fstab</code>に記載をすることで可能になるが、ubuntu（debian系全般の模様であるが）では外部ボリュームが自動マウント出来ないと、ホストは起動するがsshログインが出来ないようになる。<br/>
これを回避するため、<code>/etc/fstab</code>の記載で <strong>nobootwait</strong> のオプションを追記する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/dev/xvdf1       /mnt    ext4    defaults,nobootwait 0 0</span></code></pre></td></tr></table></div></figure>


<p>この追記で起動時に待ち（！？）が発生せず、sshdも通常通り起動しログイン可能となる模様。</p>

<p><strong>なお、AMAZON Linux（たぶんRedHat系全般と思われるが）では<code>nobootwait</code>の記載は無くてもホストはログイン可能の状態となった。</strong></p>

<hr>


<h5>情報ソース</h5>

<p><a href="http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ebs-using-volumes.html">Amazon EBS ボリュームを使用できるようにする - Amazon Elastic Compute Cloud</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SHIRASAGIで始めにやったこと]]></title>
    <link href="http://tech.farend.jp//blog/2014/12/01/shirasagi/"/>
    <updated>2014-12-01T16:39:34+09:00</updated>
    <id>http://tech.farend.jp//blog/2014/12/01/shirasagi</id>
    <content type="html"><![CDATA[<h2>サイトの作成</h2>

<p>SHIRASAGIにログイン後、システム/サイト にある「新規作成」</p>

<ul>
<li><p>サイト名：ブラウザのタブで表示させたいサイトのタイトルを入力する。<br/>
（htmlで<code>&lt;title&gt;サイト名&lt;/title&gt;</code>と入力する文字）</p></li>
<li><p>ホスト名</p></li>
<li><p>ドメイン名</p></li>
<li><p>グループを選択<br/>
（このときにグループに追加しないとSHIRASAGI ログイン後の画面に反映されなかった。）</p></li>
</ul>


<h2>レイアウトの作成</h2>

<p>画面左 メインメニュー/レイアウト にある「新規作成」<br/>
まずはトップページのレイアウトを作成した。</p>

<ul>
<li><p>レイアウト名：top</p></li>
<li><p>ファイル名：top.layout.html<br/>
拡張子<code>.layout.html</code>の入力は省略してもいい。</p></li>
<li><p>HTML<br/>
ここにソースコードを入力する。<br/>
パーツをどの位置に置くかを記述していく。</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;  
</span><span class='line'>  &lt;head&gt;  
</span><span class='line'>  &lt;/head&gt;  
</span><span class='line'>  &lt;body&gt;  
</span><span class='line'>    &lt;/ part "news" /&gt;  
</span><span class='line'>  &lt;/body&gt;  
</span><span class='line'>&lt;/html&gt;  </span></code></pre></td></tr></table></div></figure>


<p>  ※ 5行目の<code>&lt;/ part "news" /&gt;</code>は以下で作成。</p>

<h2>パーツの作成</h2>

<p>画面左 メインメニュー/パーツ にある「新規作成」<br/>
自分の分かりやすいように適当に入力。</p>

<ul>
<li><p>パーツ名：お知らせ</p></li>
<li><p>ファイル名：news.part.html<br/>
拡張子<code>.part.html</code>の入力は省略してもいい。<br/>
さっきtop.layout.htmlで<code>&lt;/ part "news" /&gt;</code>と入力したので、ここは<code>news.part.html</code>となる。</p>

<p>？マークをクリックすると「.htmlなどの拡張子の記述は不要です。」と書いてあるので<br/>
<code>news</code>だけ入力すると「保存」をクリックすれば自動的に拡張子はつく。<br/>
また、拡張子を省略せずに<code>news.part.html</code>と入力するのは問題ないが、<br/>
<code>news.part</code>と途中まで入力するとエラーが表示されるので気をつける。</p></li>
<li><p>HTML<br/>
ここにソースコードを入力する。</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div id="news"&gt;  
</span><span class='line'>  お知らせ内容  
</span><span class='line'>&lt;/div&gt;  </span></code></pre></td></tr></table></div></figure>


<p>これで、レイアウトとパーツが繋がった。</p>

<p>サイトメニュー/サイトプレビュー で見てみる。<br/>
しかし表示されない&hellip;固定ページを作っていなかった。</p>

<h2>固定ページの作成</h2>

<p>画面左 メインメニュー/固定ページ にある「新規作成」</p>

<ul>
<li><p>タイトル：index</p></li>
<li><p>ファイル名：index.html<br/>
拡張子<code>.html</code>の入力は省略してもいい。</p></li>
<li><p>レイアウト：top<br/>
ここでさっき作ったレイアウトの<code>top</code>を選択</p></li>
</ul>


<p>もう一度、サイトメニュー/サイトプレビュー で見てみると表示された。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressでの記事の書き方]]></title>
    <link href="http://tech.farend.jp//blog/2014/11/27/octopress/"/>
    <updated>2014-11-27T17:38:31+09:00</updated>
    <id>http://tech.farend.jp//blog/2014/11/27/octopress</id>
    <content type="html"><![CDATA[<h2>記事のひな形の作成</h2>

<p>コマンドラインで以下を実行すると記事のひな形が生成されます。生成されるひな形のファイル名は <code>source/_posts/YYYY-MM-DD-title.markdown</code> です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<p>rakeタスクを実行するときの <code>title</code> 部分がそのままファイル名となり、またURLの一部となるので、日本語ではなく英語またはローマ字としてください。</p>

<h2>記事の編集</h2>

<p><code>source/_posts</code> ディレクトリ内に生成されたひな形をエディタで開いて記事を編集します。</p>

<h3>front matter の編集</h3>

<p>ひな形の冒頭には「front matter」と呼ばれる記述があり、記事のタイトルや作成日、カテゴリなどが指定できるようになっています。このうち、<code>title</code>と<code>categories</code>を適宜書き換えてください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "Octopressでの記事の書き方"
</span><span class='line'>date: 2014-11-27 17:38:31 +0900
</span><span class='line'>comments: true
</span><span class='line'>categories: ['@g_maeda', 'octpress']
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<h4><code>title</code></h4>

<p>記事のタイトルです。ここに記述したタイトルがページに表示されます。</p>

<h4><code>categories</code></h4>

<p>記事を分類するカテゴリです。複数指定できます。tech.farend.jpでは次の規則に従って付与します。</p>

<ul>
<li>半角英数文字のみ使用</li>
<li>アルファベットは小文字のみ使用</li>
<li>記事の1個目のカテゴリはその記事の著者名を <code>@username</code> の形式で記述する</li>
<li>カテゴリを増やしすぎない。なるべく既存のカテゴリを使用</li>
</ul>


<h3>本文の記述</h3>

<p>front matterの後にMarkdownで記述します。</p>

<h2>記事の見た目の確認</h2>

<p>コマンドラインで以下を実行すると、サイトの生成が行われるとともにwebサーバが起動します。 <a href="http://localhost:4000">http://localhost:4000</a> にアクセスするとサイトをプレビューできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake preview</span></code></pre></td></tr></table></div></figure>


<p>なお、<code>bundle exec rake preview</code> によってwebサーバが起動している間は、記事を保存するとファイルが書き換えられたのが検知され、サイトの再生製が即時行われます。記事執筆中はwebサーバを立ち上げっぱなしにして、 ①少し書いて保存 ②自動で再生成 ③生成されたサイトをブラウザで確認 — のサイクルを繰り返すと作業しやすいと思います。</p>
]]></content>
  </entry>
  
</feed>
